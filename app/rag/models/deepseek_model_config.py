import logging
from openai import OpenAI, OpenAIError, AuthenticationError, RateLimitError
from dotenv import load_dotenv
import os
from config.settings import DEEPSEEK_BASE_URL, DEEPSEEK_API_KEY

# Configure logging
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s",
    handlers=[
        logging.FileHandler("application.log"),  # Log to a file
        logging.StreamHandler()  # Log to console
    ]
)

# Load environment variables
load_dotenv()

if not DEEPSEEK_API_KEY:
    logging.error("DEEPSEEK_API_KEY is not set in environment variables.")
    raise EnvironmentError("DEEPSEEK_API_KEY is required but not found in environment variables.")

if not DEEPSEEK_BASE_URL:
    logging.error("DEEPSEEK_BASE_URL is not set in environment variables.")
    raise EnvironmentError("DEEPSEEK_BASE_URL is required but not found in environment variables.")

# Initialize the OpenAI client for DeepSeek
try:
    client = OpenAI(api_key=DEEPSEEK_API_KEY, base_url=DEEPSEEK_BASE_URL)
except Exception as e:
    logging.critical(f"Failed to initialize OpenAI client: {e}")
    raise

def generate_deepseek_response(prompt, context, model):
    """
    Generate a response using the DeepSeek chat model.

    Args:
        prompt (str): The user input prompt.

    Returns:
        str: The response generated by the DeepSeek chat model.
    """
    if not prompt or not isinstance(prompt, str):
        logging.error("Invalid prompt: Prompt must be a non-empty string.")
        raise ValueError("Prompt must be a non-empty string.")

    # messages = [
    #         {
    #             "role": "system",
    #             "content": (
    #                 "You are a knowledgeable assistant. Use the provided context to answer questions accurately. "
    #                 "All responses must be based only on the provided context. Do not infer or use external sources. "
    #                 "If the information is not present in the Context, state that explicitly. "
    #                 "If the question is not related to the document context but pertains to greetings, basic and formal conversations, you are allowed to respond appropriately. "
    #                 "Always maintain 100% accuracy based on the context provided in step-by-step points where applicable."
    #             ),
    #         },
    #         {
    #             "role": "system",
    #             "content": f"Context:\n{context}",
    #         },
    #         {
    #             "role": "user",
    #             "content": (
    #                 "Using the provided context, answer the following question with step-by-step accuracy:\n"
    #                 f"{prompt}"
    #             ),
    #         },
    #     ]
    messages = [
    {
        "role": "system",
        "content": (
            "You are a knowledgeable assistant. First, carefully read and analyze the user's prompt. "
            "Then, using only the provided context, provide an answer that is specific to the user prompt. "
            "All responses must be based strictly on the context. Do not infer or use external sources. "
            "If the information needed to answer is not found within the context, state that explicitly. "
            "If the userâ€™s question is not related to the document context but is about greetings or basic/formal conversations, "
            "respond to it politely and appropriately. Your answers must be 100% accurate based on what the context provides."
        ),
    },
    {
        "role": "system",
        "content": f"Context:\n{{context}}"
    },
    {
        "role": "user",
        "content": (
            "First, analyze this user_prompt carefully. Then, using the provided context, "
            "answer the following question step by step, making sure to remain specific and "
            "not add any information that is not explicitly stated:\n\n"
            f"{{prompt}}"
        ),
    },
]


    try:
        response = client.chat.completions.create(
            model=model, #"deepseek-chat",
            messages=messages,
            stream=False
        )

        if not response.choices or not response.choices[0].message.content:
            logging.warning("Response received, but no content was found.")
            return "No response generated. Please try again."

        return response.choices[0].message.content.strip()

    except AuthenticationError:
        logging.error("Authentication failed. Check your DeepSeek API key.")
        raise
    except RateLimitError:
        logging.warning("Rate limit exceeded. Retrying after a delay.")
        # You could implement a retry mechanism here if needed.
        return "Rate limit exceeded. Please wait and try again."
    except OpenAIError as e:
        logging.error(f"DeepSeek API error: {e}")
        return f"An error occurred: {e}"
    except Exception as e:
        logging.critical(f"Unexpected error: {e}")
        raise
