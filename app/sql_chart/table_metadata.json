{
    "EpiUserRPAUserGroupMap": "The **EpiUserRPAUserGroupMap** table stores mappings between users and RPA (Robotic Process Automation) user groups, enabling the association of individual users with specific RPA groups. Key fields include: **UserId** (a unique identifier representing individual users), and **RPAUserGroupId** (a unique identifier representing specific RPA user groups, used to map users to their respective groups).",
    "EpiUsers": "The **EpiUsers** table stores comprehensive information about users within the system, including their personal details, professional roles, geographic locations, and system access permissions. Key fields include:  \n- **Id** (a unique identifier for each user, stored as a GUID),  \n- **LoginUserName** (the username used for system login and authentication),  \n- **Email** (the user's email address for communication and identification),  \n- **Designation** (the user's job title or role within the organization),  \n- **Location** (the user's geographic area or locality),  \n- **IsTrained** (a boolean flag indicating whether the user has completed training),  \n- **IsDeleted** (a boolean flag indicating whether the user account has been marked as deleted), and  \n- **AllowMobile** (a boolean flag indicating whether the user has permission to access the system via mobile devices).  \n\nThis table is essential for managing user identities, tracking their roles and locations, and controlling their access to system features.",
    "GenieBots": "The **GenieBots** table stores information about individual bots, including their unique identifiers, operational status, and connection details. Key fields include:  \n- **Id** (a unique identifier for each record, stored as a UUID),  \n- **Name** (a distinct label for each bot, combining a username or identifier with a project reference),  \n- **Health** (the operational status of a bot, such as active or disconnected),  \n- **LastHeartBeat** (the timestamp of the most recent communication or status update from a bot),  \n- **MachineId** (a unique identifier for the machine associated with the bot), and  \n- **UserId** (a unique identifier for the user linked to the bot).  \n\nThis table is essential for tracking bot activity, connectivity, and status within the system.",
    "GenieJobExecutionDetails": "The **GenieJobExecutionDetails** table stores detailed information about job executions, including their timelines, statuses, associated users, machines, and error details. Key fields include:  \n- **Id** (a unique identifier for each job execution record, stored as a UUID),  \n- **GenieJobId** (a unique identifier linking to specific job executions),  \n- **StartTime** (the timestamp when a job execution began, stored in ISO 8601 format),  \n- **EndTime** (the timestamp when a job execution was completed, stored in ISO 8601 format),  \n- **Status** (the current state or outcome of a job execution, such as completed or error),  \n- **GenieScriptId** (a unique identifier linking job executions to specific scripts),  \n- **MachineId** (a unique identifier representing the machine involved in the job execution),  \n- **UserId** (a unique identifier representing the user associated with the job execution),  \n- **ErrorDetails** (detailed error messages and stack traces for troubleshooting failed job runs).  \n\nThis table is essential for tracking, analyzing, and debugging job executions within the system.",
    "GenieJobs": "The **GenieJobs** table stores information about job entries, including details about their roles, execution, scheduling, and status. Key fields include:  \n- **Id** (a unique identifier for each job, stored as a UUID),  \n- **Name** (the title or name of the job, such as 'PreSales'),  \n- **Description** (additional details or notes about the job, which may be optional),  \n- **GenieScriptId** (a unique identifier for the job script associated with the job),  \n- **CreatedDate** (the timestamp when the job was created),  \n- **LastModifiedDate** (the timestamp of the most recent modification to the job),  \n- **IsDeleted** (a boolean flag indicating whether the job is marked as deleted),  \n- **TargetExecution** (the intended recipient or execution context for the job),  \n- **JobType** (the type of job, such as 'manual' or 'automated'),  \n- **Status** (the current state of the job, such as 'Pause'), and  \n- **CronExpression** (scheduling information for the job, if applicable).  \n\nThis table is essential for managing and tracking job-related data, including their creation, modification, execution, and scheduling details.",
    "GenieJobSchedules": "The **GenieJobSchedules** table stores information related to job scheduling configurations, including details about job schedules, types, and associated metadata. Key fields include:  \n- **ScheduleName** (a human-readable identifier for the schedule, possibly optional),  \n- **ScheduleType** (defines the type of schedule, such as recurring or one-time),  \n- **ScheduleInfo** (stores detailed scheduling configurations or instructions, potentially optional),  \n- **GenieJobId** (a unique identifier for the job, likely populated dynamically), and  \n- **CronExpression** (a string defining the schedule for recurring jobs, possibly empty for non-recurring tasks).",
    "GenieScripts": "The **GenieScripts** table stores information about script files used within a system, including their metadata, versions, and associated tasks. Key fields include:  \n- **Id** (a unique identifier for each script, stored as a UUID),  \n- **Name** (the name of the script file, such as 'BotTest.epp'),  \n- **Version** (the version number of the script, following semantic versioning),  \n- **ProcessTaskId** (a unique identifier linking the script to a specific process task), and  \n- **CreatedDate** (the timestamp indicating when the script was created).  \n\nThis table is essential for managing, tracking, and auditing scripts within the system.",
    "GpsLog": "The **GpsLog** table stores detailed GPS tracking and logging data, including user interactions, system events, and location-based activities. It is used to monitor and analyze GPS-related events, such as navigation steps, user actions, and application processes, often in the context of tracking vehicles, devices, or user behavior. Key fields include:  \n- **Sequence** (the order or position of GPS log entries),  \n- **GpsXml** (XML-formatted data capturing detailed activity logs),  \n- **Machine** (the unique identifier or name of the machine or device associated with GPS logging),  \n- **UserId** (the unique identifier of the user linked to the GPS log entry),  \n- **Timestamp** (the exact date and time of GPS data capture), and  \n- **StepDuration** (the duration of individual steps or intervals in seconds).  \n\nThis table is essential for tracking GPS-related activities, analyzing user behavior, and monitoring system processes in real-time.",
    "GraphFileMap": "The **GraphFileMap** table stores mappings between graphs and associated files, including unique identifiers that link graph data to specific files. Key fields include: **GraphId** (a unique identifier representing specific graphs), and **FileId** (a unique identifier representing files associated with graph data). These fields are used to establish relationships between graph elements and their corresponding files.",
    "GwzRawSteps": "The **GwzRawSteps** table stores information related to steps within a process or workflow, including detailed metadata and sequencing. Key fields include:  \n- **GWZFileGUID** (a unique identifier for files or records, potentially serving as a placeholder when unassigned),  \n- **StepIndex** (a sequential identifier or index for tracking the order or position of steps),  \n- **StepXml** (XML-formatted data containing detailed information or metadata about individual steps, which may be optional or conditionally populated).",
    "JobMachineApplicationVaultMap": "The **JobMachineApplicationVaultMap** table stores mappings between jobs, machines, and application vaults, including details about the relationships and associations between these entities. Key fields include:  \n- **GenieJobId** (a unique identifier for jobs processed by the Genie system),  \n- **MachineGroupId** (an identifier for a specific group of machines associated with a job or application),  \n- **MachineId** (a unique identifier for a machine linked to a job or application vault), and  \n- **ApplicationVaultId** (a unique identifier linking an application vault to a job or machine).",
    "JobMachineOSVaultMap": "The **JobMachineOSVaultMap** table stores mappings between jobs, machines, and operating system (OS) vault configurations, including associations that link specific jobs to machine groups or individual machines and their corresponding OS vaults. Key fields include:  \n- **GenieJobId** (a unique identifier for jobs associated with the Genie system),  \n- **MachineGroupId** (an identifier for grouping machines, used to associate machines with jobs or OS vault configurations),  \n- **MachineId** (a unique identifier for machines linked to specific jobs or configurations), and  \n- **OSVaultId** (a unique identifier for operating system vaults associated with jobs or machines).",
    "JobUserApplicationVaultMap": "The **JobUserApplicationVaultMap** table stores mappings between jobs, users, and application vaults, including associations that link specific jobs, user groups, and individual users to application vaults. Key fields include:  \n- **GenieJobId** (unique identifiers representing specific jobs or tasks),  \n- **RPAUserGroupId** (unique identifiers representing RPA user groups),  \n- **UserId** (unique identifiers representing individual users), and  \n- **ApplicationVaultId** (unique identifiers representing application vaults associated with job-user mappings).",
    "JobUserOSVaultMap": "The **JobUserOSVaultMap** table stores mappings between jobs, users, and OS-specific vaults, including associations that link users or user groups to specific job-related data or processes. Key fields include: **GenieJobId** (unique identifiers for specific jobs), **RPAUserGroupId** (unique identifiers for RPA user groups), **UserId** (unique identifiers for individual users), and **OSVaultId** (unique identifiers for OS-specific vaults).",
    "MachineGroupMap": "The **MachineGroupMap** table stores mappings between machines and their associated groups, enabling the organization and categorization of machines within the system. Key fields include: **MachineId** (a unique identifier for machines, potentially used to link them to specific groups), and **MachineGroupId** (a unique identifier that associates machines with specific groups, likely representing group relationships). The empty sample data for both fields suggests they may be required for establishing these mappings.",
    "MachineGroups": "The **MachineGroups** table stores information about groups of machines, including their unique identifiers, names, descriptions, and deletion status. Key fields include:  \n- **Id** (a unique identifier for each machine group, likely auto-generated or system-assigned),  \n- **Name** (a unique label or identifier for a specific group of machines),  \n- **Description** (optional textual details or notes about the machine group), and  \n- **IsDeleted** (a flag indicating whether the machine group has been marked as deleted, typically a boolean or binary value).",
    "Machines": "The **Machines** table stores information about individual machines, including their operational status, identification details, and maintenance history. Key fields include:  \n- **Id** (a unique identifier for each machine, stored as UUIDs),  \n- **Name** (alphanumeric codes representing machine names or serial numbers),  \n- **LastHeartBeat** (timestamp of the most recent communication from the machine, indicating its operational status),  \n- **Health** (operational status or condition of the machine),  \n- **CreatedDate** (timestamp of when the machine record was created),  \n- **LastModifiedDate** (timestamp of the most recent update to the machine record), and  \n- **IsDeleted** (a boolean flag indicating whether the machine record is marked as deleted).  \n\nThis table is essential for tracking and managing machine data, ensuring accurate identification, status monitoring, and record maintenance.",
    "ManualActivities": "The **ManualActivities** table stores records of manual tasks or activities, including details about their type, associated forms, and time constraints. Key fields include:  \n- **Id** (a unique identifier for each activity record, stored as a UUID),  \n- **Name** (descriptive labels or titles for manual activities, such as 'Legal Documents' or 'Office Meetings'),  \n- **EFMFormName** (the name or identifier of an associated EFM form, e.g., 'default.efm'),  \n- **FormContent** (JSON-formatted data defining the schema and configuration of forms),  \n- **ProcessTaskId** (a UUID linking the activity to a specific task or process),  \n- **CreatedDate** (the timestamp when the activity was created),  \n- **LastModifiedDate** (the timestamp of the most recent update to the activity),  \n- **IsDeleted** (a boolean flag indicating if the activity is marked as deleted),  \n- **Description** (optional textual details about the activity), and  \n- **ActivityMaxTime** (the maximum allowable time in minutes for completing the activity, e.g., 30 or 60 minutes).",
    "ManualActivityEvents": "The **ManualActivityEvents** table stores records of manual activity events, including details about the timing, users, and associated data for each event. Key fields include:  \n- **Id** (a unique identifier for each event, stored as a UUID),  \n- **ManualActivityId** (a GUID used to uniquely identify specific manual activities),  \n- **UserId** (a UUID representing the user who performed the activity),  \n- **Data** (unstructured or semi-structured data, often in JSON format, containing details or metadata about the event),  \n- **StartTime** (a timestamp in ISO 8601 format indicating when the event began),  \n- **EndTime** (a timestamp in ISO 8601 format indicating when the event ended), and  \n- **SyncedAfterDelete** (a boolean flag indicating whether the event has been synchronized after deletion).  \n\nThis table is essential for tracking and managing manual activities, ensuring traceability, and maintaining synchronization statuses within the system.",
    "OSVaults": "The **OSVaults** table stores secure vault-related information, including encrypted keys, user associations, and project linkages. Key fields include:  \n- **Id** (a unique identifier for each record, stored as a UUID),  \n- **VaultKey** (encrypted or encoded keys, likely for secure access or identification),  \n- **CreatedDate** (timestamp indicating when a vault record was created),  \n- **LastModifiedDate** (timestamp of the most recent modification to a record),  \n- **Description** (optional textual information or notes about the vaults),  \n- **UserName** (unique identifier or name of a user associated with a vault), and  \n- **ProjectId** (a unique identifier for projects, stored as a GUID).",
    "PasswordHistorys": "The **PasswordHistorys** table stores historical records of user passwords, including encrypted or hashed representations of passwords and their associated metadata. This table is used to maintain a secure log of previously used passwords for auditing and security purposes. Key fields include:  \n- **PasswordHash** (stores encrypted or hashed representations of user passwords for secure storage),  \n- **CreatedDate** (captures the timestamp when a password record was created or updated),  \n- **UserId** (stores unique identifiers linking each password history entry to a specific user).",
    "PDCache": "The `PDCache` table stores cached data, including information about the expiration and validity of cached entries. Key fields include:  \n- **Id** (a unique identifier for each cached record),  \n- **Value** (the data or content stored in the cache, which may include strings, numbers, or serialized information),  \n- **ExpiresAtTime** (a timestamp indicating when the cached entry is set to expire),  \n- **SlidingExpirationInSeconds** (the duration in seconds for which the cached item remains valid, with the expiration time resetting upon access), and  \n- **AbsoluteExpiration** (a timestamp or date marking the exact time when the cached item is set to expire).",
    "PIUserGroupTask": "The **PIUserGroupTask** table stores associations between user groups and tasks, including the linking of specific tasks to particular user groups. Key fields include: **PIUserGroupId** (a unique identifier representing a specific user group), and **ProcessTaskId** (a unique identifier representing a specific task or process associated with a user group).",
    "ProcessDef": "The **ProcessDef** table stores information about process definitions, including details that define and manage specific processes. Key fields include:  \n- **ID** (a unique identifier for each process definition, ensuring distinct records),  \n- **ProcessName** (the name or label of a specific process definition, serving as a human-readable identifier),  \n- **KeyStepSeq** (a sequence or order of key steps within a process definition), and  \n- **AbortNextStart** (a flag or indicator that determines whether a process should be aborted upon its next start).",
    "ProcessDefDetails": "The **ProcessDefDetails** table stores detailed information about process definitions, including their tasks, steps, and configurations. It is used to define and manage workflows, ensuring proper sequencing and execution of tasks. Key fields include:  \n- **ID** (a unique numeric identifier for each process definition, likely serving as the primary key),  \n- **ProcessTaskId** (a UUID representing specific tasks within a process definition),  \n- **StepType** (a numeric code indicating the type or category of a step in the workflow),  \n- **HashCode** (a cryptographic hash used for version tracking or integrity verification of process definitions),  \n- **Sentence** (plain-text instructions describing the steps or actions to be performed),  \n- **IsMandatory** (a binary indicator specifying whether a step or process is required), and  \n- **Seq** (a sequence number defining the order or priority of steps within the process).  \n\nAdditional fields like **StepXml**, **IsAltStep**, **AltHashCode**, **AltSentence**, and **AltStepXml** provide optional or alternative configurations for process steps, enhancing flexibility in workflow management.",
    "MessageQueueStatus": "The **MessageQueueStatus** table stores information about the status and lifecycle of messages within a message queue system, including details about message retrieval, processing errors, and timestamps. Key fields include:  \n- **CorrelationId** (a unique identifier used to track and correlate related messages),  \n- **IsMessageRetrieved** (a boolean indicating whether a message has been retrieved from the queue),  \n- **IsProcessingErrored** (a boolean indicating whether an error occurred during message processing),  \n- **CreatedDate** (the timestamp when a message was added to the queue), and  \n- **RetrievedDate** (the timestamp when a message was retrieved from the queue, if applicable).",
    "Processes": "The **Processes** table stores information about various processes within a system, including their creation, modification, and hierarchical relationships. Key fields include:  \n- **Id** (a unique identifier for each process, stored as a UUID),  \n- **Name** (descriptive labels or identifiers for processes, such as script commands or URLs),  \n- **ProjectId** (a unique identifier linking processes to specific projects),  \n- **CreatedDate** (timestamp indicating when a process was created, in ISO 8601 format),  \n- **LastModifiedDate** (timestamp of the most recent update to a process record),  \n- **IsDeleted** (a boolean flag indicating whether a process is marked as deleted),  \n- **ParentId** (identifier of a parent process, indicating hierarchical relationships), and  \n- **SlNo** (a serial number or identifier for tracking individual processes).  \n\nThis table is essential for managing, tracking, and auditing processes within the system.",
    "ProcessGraphData": "The **ProcessGraphData** table stores information about process graphs, including workflows, data flows, and their associated metadata. It is used to track and manage various processes, their statuses, and configurations. Key fields include:  \n- **GraphId** (a unique identifier for each graph or process),  \n- **GraphName** (a descriptive name or label for the process graph),  \n- **DateTime** (a timestamp indicating when the process or event occurred),  \n- **IsProcessed** (a boolean flag indicating whether the process has been completed),  \n- **Settings** (JSON-formatted configuration data for graph preferences and workflow details),  \n- **AutomatabilityRate** (a percentage value representing the feasibility of automating the process).  \n\nThis table is essential for monitoring process execution, tracking modifications, and analyzing automation potential.",
    "ProcessImprovementUserGroups": "The **ProcessImprovementUserGroups** table stores information about user groups involved in process improvement initiatives, including their unique identifiers, names, associated projects, descriptions, creation and modification timestamps, and deletion status. Key fields include:  \n- **PIUserGroupId** (unique identifier for user groups),  \n- **Name** (name of the user group or department),  \n- **ProjectId** (unique identifier linking user groups to specific projects),  \n- **Description** (optional textual details about the user group),  \n- **DateCreated** (timestamp of when the user group was created),  \n- **LastModified** (timestamp of the most recent modification to the user group record), and  \n- **IsDeleted** (boolean flag indicating if the user group is marked as deleted).",
    "AnalyzerUserPerformanceScreen": "The **AnalyzerUserPerformanceScreen** table stores user performance and interaction data, including details about user activities, screen interactions, and performance metrics. Key fields include:  \n- **UserId** (unique identifiers for users, linking performance data to individuals),  \n- **GWZFile** (unique identifiers referencing specific files or records related to user performance),  \n- **DateTime** (timestamps indicating when performance data was recorded or analyzed),  \n- **ScreenName** (names or identifiers of screens or interfaces accessed by users),  \n- **Duration** (time durations, in seconds, spent by users on specific screens),  \n- **TotalSteps** (cumulative step counts for user activity or progress tracking),  \n- **TapName** (names of executable files or processes being monitored), and  \n- **Domain** (IP addresses or domain-related information associated with user interactions).  \n\nThis table is likely used for performance monitoring, user behavior analysis, and tracking interactions within an application or system.",
    "ProcessInstanceAppPerformance": "The **ProcessInstanceAppPerformance** table stores performance data related to application processes, including details about process execution, duration, and progress. Key fields include:  \n- **ProcessFileId** (a unique identifier for files or documents associated with a process instance),  \n- **TapName** (the name of the application or process being monitored, such as 'chrome.exe'),  \n- **Duration** (the time taken in seconds for a process instance to complete), and  \n- **TotalSteps** (the total number of steps or stages completed in a process instance).  \n\nThis table is used to track and analyze the performance and progress of application processes.",
    "ProcessInstances": "The **ProcessInstances** table stores information about the execution of various processes, including details about their sequence, associated users, steps, and completion status. Key fields include:  \n- **SeqNum** (a sequence number indicating the order of process instances),  \n- **UserId** (a unique identifier linking process instances to users),  \n- **ProcessName** (the name or type of the process being executed),  \n- **StartStepDate** (the timestamp when a specific step in the process began),  \n- **ProcessFileName** (the file name associated with the process instance),  \n- **ProcessFileId** (a unique identifier for files linked to the process),  \n- **ProcessTaskId** (a unique identifier for tasks within the process),  \n- **Complete** (a binary indicator of whether the process is completed),  \n- **TotalKeySteps** (the number of critical steps required to complete the process),  \n- **KeySteps** (a sequence of critical steps within the process),  \n- **Duration** (the time taken to complete the process),  \n- **TotalSteps** (the total number of steps in the process), and  \n- **AppProcessed** (a boolean indicating whether the application process has been completed).  \n\nThis table is essential for tracking and managing workflows, ensuring proper sequencing, and monitoring process efficiency and completion.",
    "ProcessDiscoveryMigrationHistory": "The **ProcessDiscoveryMigrationHistory** table stores information about the history of process discovery migrations, including details about migration events, versions, and timestamps. Key fields include:  \n- **MigrationId** (a unique identifier or label for a specific migration event or state, such as the initial configuration or phase),  \n- **Version** (the version number of the process discovery migration, indicating the specific release or update level),  \n- **MigrationDateTime** (the exact date and time when a migration event occurred, used to track the timing of migration processes).",
    "ProcessMetrices": "The **ProcessMetrices** table stores detailed metrics and performance data related to various processes, including task execution, user interactions, and process efficiency. Key fields include:  \n- **Id** (a unique identifier for each record, stored as a UUID),  \n- **ProcessTask** (descriptive labels or names of specific tasks or processes, such as 'Amazon, Insurance, Procure to Pay Task's'),  \n- **Timestamp** (the exact date and time when a process metric was captured, stored in ISO 8601 format),  \n- **TimeDuration** (the duration of a process, likely measured in seconds or minutes),  \n- **AutomatabilityRate** (the percentage of a process that can be automated, stored as a numerical value), and  \n- **AHT** (the Average Handling Time for processes, stored as a range of values indicating minimum and maximum completion times).  \n\nThis table is used to track, analyze, and optimize process performance, user interactions, and automation potential across various tasks and workflows.",
    "ProcessTasks": "The **ProcessTasks** table stores information related to process management tasks, including details about task identification, types, project associations, and task lifecycle tracking. Key fields include:  \n- **ProcessTaskId** (a unique identifier for individual tasks, stored as GUIDs),  \n- **Name** (task-related identifiers or descriptions, such as SQL expressions, URLs, or file paths),  \n- **TaskType** (specifies the type of task, e.g., 'ManualTask'),  \n- **ProjectId** (links tasks to specific projects using UUIDs),  \n- **ProcessId** (associates tasks with a specific process using UUIDs),  \n- **CreatedDate** (timestamp indicating when a task was created),  \n- **LastModifiedDate** (timestamp of the most recent task modification),  \n- **IsDeleted** (boolean flag indicating if a task is marked as deleted),  \n- **SlNo** (sequence or serial number for task ordering),  \n- **AbortNextStart** (flag to control task execution flow),  \n- **SMEAHT** (numerical metric or measurement related to tasks),  \n- **IsProcessing** (boolean flag indicating if a task is currently being processed),  \n- **IsProductionReady** (boolean flag indicating if a task is ready for production deployment),  \n- **OperationId** (identifier for specific operations or tasks, which may be unassigned).  \n\nThis table is essential for managing and tracking tasks within a process management system, ensuring proper task execution, and maintaining task lifecycle records.",
    "__EFMigrationsHistory": "The `__EFMigrationsHistory` table stores information about database migrations applied in an Entity Framework Core context, including details about the sequence of schema changes and the version of the framework used. Key fields include:  \n- **MigrationId** (a unique identifier for each database migration, typically representing the name or ID of the migration),  \n- **ProductVersion** (the version of Entity Framework Core used to apply the migration, represented as a string).",
    "__ProcessDiscoveryMigrationHistory": "The `__ProcessDiscoveryMigrationHistory` table stores records of process discovery migrations, including details about the migration events and associated product versions. Key fields include:  \n- **MigrationId** (a unique identifier for each migration record, likely using alphanumeric or GUID values),  \n- **ProductVersion** (the version number or identifier of the product associated with a specific migration event, potentially optional or placeholder).",
    "RCCabbedGWZFiles": "The **RCCabbedGWZFiles** table stores information related to cabinet (`.cab`) files, including their metadata, processing status, and associated user and machine details. This table is used to manage and track compressed data or configuration files within a structured system. Key fields include:  \n- **CabFileID** (a unique identifier for each file, stored as a UUID),  \n- **CabFileName** (the name of the cabinet file, often including user identifiers, project names, and timestamps),  \n- **RelativePath** (the hierarchical directory path indicating the file's location within the system),  \n- **DateTime** (a precise timestamp for when the file was created or logged),  \n- **UserId** (a unique identifier for the user associated with the file),  \n- **MachineName** (the name or identifier of the machine linked to the file),  \n- **IsProcessed** (a boolean flag indicating whether the file has been processed),  \n- **IsDeleted** (a boolean flag indicating whether the file has been marked as deleted),  \n- **IsProcessing** (a boolean flag indicating whether the file is currently being processed), and  \n- **IsErrored** (a boolean flag indicating whether the file has encountered an error).",
    "AnalyzerProcessDetails": "The **AnalyzerProcessDetails** table stores detailed information about analyzer processes, including their execution, timing, and associated metadata. Key fields include:  \n- **ID** (a unique identifier for each process record),  \n- **Project** (the name or identifier of the project associated with the process),  \n- **GWZFile** (file paths or references to configuration or data files used in the process),  \n- **User** (the identifier or name of the user associated with the process),  \n- **DateTime** (timestamps indicating when the process occurred),  \n- **Application** (the name or identifier of the software application tied to the process),  \n- **StepSeq** (the sequence or order of steps in the process),  \n- **Description** (detailed notes or context about the process),  \n- **Hashcode** (a unique checksum or identifier for data integrity or process identification),  \n- **ProcessTime** (timestamps or durations related to process execution),  \n- **ThinkTime** (the time interval spent in a processing state before the next action),  \n- **Discovered** (a status flag indicating whether a process or item has been identified),  \n- **ProcessName** (the name or identifier of the specific process being analyzed),  \n- **KeyStep** (a critical step or milestone within the process),  \n- **InstanceNumber** (a unique identifier for individual process instances).  \n\nThis table is designed to provide comprehensive tracking and analysis of analyzer processes, ensuring detailed records for auditing, optimization, and troubleshooting.",
    "AnalyzerUserPerformance": "The **AnalyzerUserPerformance** table stores detailed information about user performance and activity, including metrics related to productivity, application usage, and task durations. Key fields include:  \n- **UserId** (a unique identifier for users, represented as a GUID),  \n- **GWZFile** (unique identifiers linking user performance data to external files or datasets),  \n- **DateTime** (timestamps indicating when performance data was recorded),  \n- **Application** (information about applications or web resources accessed by users),  \n- **Duration** (time intervals for user-related activities),  \n- **TotalSteps** (cumulative steps taken by users, likely in a fitness or activity context),  \n- **Type** (categorizes user activities as 'Productive' or 'Non-Productive'),  \n- **TapName** (URLs or application names representing user interactions),  \n- **IdleDuration** (time users were inactive),  \n- **ThinkDuration** (time users spent processing information), and  \n- **ActionDuration** (duration of specific user actions).  \n\nThis table is used to analyze user behavior, productivity, and performance by tracking their interactions, task durations, and activity patterns.",
    "RCCaptureEvents": "The **RCCaptureEvents** table stores detailed information about user interactions and system events captured during specific processes, including data related to user actions, timestamps, and contextual details. Key fields include:  \n- **Id** (a unique identifier for each capture event),  \n- **UserId** (a UUID representing the user associated with the event),  \n- **Machine** (the identifier of the machine involved in the event),  \n- **TimeStamp** (the precise date and time of the event),  \n- **EventName** (the type of user interface event, such as 'Click' or 'WindowActivate'),  \n- **URL** (the web address associated with the event), and  \n- **StepDuration** (the duration of a specific step or event in seconds).  \n\nThis table is likely used to monitor and analyze user interactions, track workflow steps, and ensure proper documentation of events for review or auditing purposes.",
    "AnalyzerUserPerformanceDomain": "The **AnalyzerUserPerformanceDomain** table stores user performance data within specific domains, including details about user interactions, activity durations, and performance classifications. Key fields include:  \n- **UserId** (unique identifiers for users, linking performance data),  \n- **GWZFile** (unique identifiers referencing files or records associated with user performance),  \n- **DateTime** (timestamps indicating when performance data was recorded or analyzed),  \n- **Domain** (specific domains or contexts of user interactions, such as browser activities or login events),  \n- **Duration** (time intervals, in seconds, representing the duration of user activities),  \n- **TotalSteps** (cumulative number of steps taken by users in performance tracking),  \n- **Type** (classification of user performance, such as 'Productive'), and  \n- **TapName** (application or process names and associated URLs or actions, tracking user activity metrics).",
    "RCCDTDataInfo": "The **RCCDTDataInfo** table stores information related to custom data types (CDTs) and their associated values, including references to files, process steps, and specific data points. Key fields include:  \n- **GWZFileGUID** (a unique identifier for a file linked to the data record, likely optional or conditionally populated),  \n- **StepId** (a unique identifier for a specific step or stage in a process, possibly optional or used when a step is assigned),  \n- **CDTName** (the name or identifier of a custom data type or category, potentially optional or representing a default value),  \n- **CDTValue** (a specific value or measurement associated with a data point, possibly optional or used for placeholder values).",
    "ApplicationTypes": "The **ApplicationTypes** table stores information about software applications or processes, including their names, types, executable file names, and whether they are browser-based. Key fields include:  \n- **Application** (stores the names and descriptions of software applications or processes, such as 'Google Chrome' or 'Notepad++ : a free (GPL) source code editor'),  \n- **Type** (categorizes applications as either 'Productive' or 'Non-Productive', indicating their operational status or purpose),  \n- **TapName** (stores the names of executable files, such as 'chrome.exe' or 'explorer.exe', associated with specific applications), and  \n- **IsBrowser** (indicates whether an application type is browser-based, storing boolean values `True` or `False`).",
    "RCGWZFiles": "The **RCGWZFiles** table stores information related to GPS data files and their processing status, including details about file identification, user associations, and workflow metadata. Key fields include:  \n- **GWZFileGUID** (a globally unique identifier for individual files),  \n- **GWZFileName** (the name of GPS data files, often including user and project details),  \n- **RelativePath** (the hierarchical file path within a directory structure),  \n- **FileIndex** (a unique numeric identifier for files),  \n- **IsProcessed** (a boolean flag indicating whether a file has been processed),  \n- **DateTime** (timestamps for tracking file creation or modification),  \n- **UserId** (a unique identifier for users associated with the files),  \n- **CabFileID** (a unique identifier for files linked to a specific cabinet or container),  \n- **IsErrored** (a boolean flag indicating if a file encountered processing errors),  \n- **GWZHeader** (XML-formatted metadata about workflow processes), and  \n- **ErrorMessage** (error messages or status information related to file processing).",
    "ConfigurationEntity": "The **ConfigurationEntity** table stores system configuration settings, including unique identifiers and their corresponding values used to define or reference various system configurations. Key fields include: **Key** (unique identifiers or names for specific configuration settings, such as feature toggles or file paths), and **Value** (configuration settings or parameters, such as boolean flags or resource locations).",
    "RCIdleTimeInfo": "The **RCIdleTimeInfo** table stores information related to idle time tracking, including details about specific files, categories of idle time, and the duration of idle periods. Key fields include:  \n- **GWZFileGUID** (a globally unique identifier linking to specific files or resources associated with idle time tracking),  \n- **Category** (a descriptor classifying the type of idle time, such as 'TacitInfo', 'SystemIdleInfo', or 'ProcessIdleInfo'),  \n- **Tag** (an optional field for tagging or categorizing idle time records, though often left empty),  \n- **Duration** (a numerical value representing the amount of time a resource or system remains idle, likely in seconds or minutes).",
    "ApplicationVaults": "The **ApplicationVaults** table stores secure application login and authentication details, including encrypted credentials, application names, and timestamps for creation and modification. Key fields include:  \n- **Id** (a unique identifier for each record, stored as a UUID),  \n- **ApplicationLoginId** (the login identifier or username associated with an application user),  \n- **ApplicationLoginKey** (encrypted or encoded login credentials or authentication keys),  \n- **ApplicationName** (the name of the application, such as 'Youtube'),  \n- **CreatedDate** (the timestamp indicating when the application vault was created),  \n- **LastModifiedDate** (the timestamp of the most recent modification to the vault entry),  \n- **Description** (optional textual details about the application vault), and  \n- **ProjectId** (a unique identifier linking the vault to a specific project).  \n\nThis table is designed to securely manage and organize application-related authentication data, ensuring traceability and efficient retrieval.",
    "RefreshTokens": "The **RefreshTokens** table stores information related to refresh tokens used for authentication and session management, including details about token issuance, expiration, and user associations. Key fields include:  \n- **Id** (a unique identifier for each refresh token, stored as a UUID),  \n- **UserId** (a UUID linking the refresh token to a specific user),  \n- **Issued** (a timestamp indicating when the token was issued),  \n- **Expires** (a timestamp indicating when the token will expire), and  \n- **Token** (an encrypted or hashed string representing the refresh token).  \n\nThis table ensures secure and traceable management of refresh tokens for user authentication and session renewal.",
    "AspNetRoleClaims": "The **AspNetRoleClaims** table stores role-based security claims, including permissions and access rights associated with specific roles. Key fields include:  \n- **Id** (a unique identifier for each role claim entry),  \n- **RoleId** (a UUID linking claims to specific roles),  \n- **ClaimType** (the type of permission or claim, such as 'CanViewAppDashboard'), and  \n- **ClaimValue** (the value associated with a claim, often indicating whether a permission is granted or denied).",
    "BackgroundJobs": "The **BackgroundJobs** table stores information about background jobs, including their scheduling, configuration, and execution status. Key fields include:  \n- **JobId** (a unique identifier for each background job),  \n- **JobType** (specifies the type or category of the job),  \n- **ScheduleType** (defines the frequency or schedule of the job, such as recurring or one-time),  \n- **CronExpression** (stores the cron syntax for recurring jobs),  \n- **IsPaused** (indicates whether the job is currently paused), and  \n- **CreatedDate** (tracks when the job was created).  \n\nThis table is essential for managing and monitoring background tasks, ensuring they are executed as intended and providing insights into their lifecycle and status.",
    "ResourceGroupPIUserGroupMap": "The **ResourceGroupPIUserGroupMap** table stores mapping or association details between resource groups and user groups, facilitating access control or permissions management. Key fields include:  \n- **CaptureResourceGroupId** (an identifier linking a specific resource group to a user group, likely storing a unique ID or reference),  \n- **PIUserGroupId** (a unique identifier for a user group associated with a specific resource group, used for linking resource groups to their corresponding user groups).",
    "AspNetRoles": "The **AspNetRoles** table stores information about user roles within the system, including their unique identifiers, names, descriptions, and timestamps for creation and modification. It plays a critical role in access control and permissions management by defining distinct roles that users can be assigned. Key fields include:  \n- **Id** (a unique identifier for each role, stored as a GUID),  \n- **Name** (the unique name or label of the role, such as 'Admin' or 'ProjectAdmin'),  \n- **NormalizedName** (the uppercase version of the role name for consistent identification),  \n- **ConcurrencyStamp** (a GUID used to track changes and manage concurrency for role records),  \n- **Description** (a textual description providing context about the role's purpose or responsibilities),  \n- **DateCreated** (the timestamp indicating when the role was created), and  \n- **LastModified** (the timestamp indicating the last time the role was updated).",
    "ResourceGroupUserGroupMap": "The **ResourceGroupUserGroupMap** table stores mappings between user groups and resource groups, facilitating the association of specific user groups with designated resource groups. Key fields include:  \n- **EpiGroupGroupId** (a unique identifier for a group within an \"EpiGroup\" context, linking user groups to resource groups),  \n- **CaptureResourceGroupId** (an identifier linking a specific resource group to a user group, potentially used when a resource group is assigned or applicable).",
    "AspNetUserClaims": "The **AspNetUserClaims** table stores user-specific claims, including details about permissions, access rights, or entitlements associated with individual users. Key fields include:  \n- **Id** (a unique numeric identifier for each claim record, ensuring no duplicates and enabling precise referencing),  \n- **UserId** (a UUID that links each claim to a specific user, serving as a foreign key to associate claims with user records),  \n- **ClaimType** (a string-based identifier for the type of claim, such as access rights or capabilities), and  \n- **ClaimValue** (a value, often boolean or string, indicating the status or state of a specific claim for a user).",
    "ResourceGroupUserMap": "The **ResourceGroupUserMap** table stores mapping information between users and resource groups, including details about user associations with specific resource groups for tracking, management, or access control purposes. Key fields include:  \n- **CaptureResourceGroupId** (an identifier linking users to specific resource groups, possibly for tracking or management purposes),  \n- **UserId** (a unique identifier for users associated with specific resource groups, facilitating user-resource group mapping and access management).",
    "AspNetUserLogins": "The **AspNetUserLogins** table stores information about external authentication providers used by users to log in, including details about the provider and the user's association with it. Key fields include:  \n- **LoginProvider** (the name or identifier of the external authentication provider, such as Google or Facebook),  \n- **ProviderKey** (a unique identifier provided by the external authentication provider to link the user's external login to their account),  \n- **ProviderDisplayName** (the human-readable name or label of the external authentication provider), and  \n- **UserId** (a unique identifier linking the user to their external login information).",
    "JobOperationMap": "The **JobOperationMap** table stores mapping relationships between jobs and their associated operations, including details about the timing and linkage of these operations. Key fields include:  \n- **JobId** (a unique identifier for a specific job, linking it to associated operations or tasks),  \n- **OperationId** (a unique identifier for specific operations associated with jobs), and  \n- **JobStartTime** (a timestamp indicating when a specific job operation begins).",
    "RPAUserGroups": "The **RPAUserGroups** table stores information about user groups involved in Robotic Process Automation (RPA), including their unique identifiers, names, associated projects, descriptions, creation and modification timestamps, and deletion status. Key fields include:  \n- **Id** (a unique identifier for each user group, stored as a GUID),  \n- **Name** (the descriptive name or label of the user group, such as 'Pre Sales'),  \n- **ProjectId** (a unique identifier linking the user group to a specific project),  \n- **Description** (optional notes or details about the user group),  \n- **DateCreated** (the timestamp indicating when the user group was created),  \n- **LastModified** (the timestamp of the most recent update to the user group record), and  \n- **IsDeleted** (a boolean flag indicating whether the user group has been marked as deleted).  \n\nThis table is essential for managing and organizing user groups within RPA systems, ensuring proper categorization, tracking, and synchronization of user-related data.",
    "AspNetUserRoles": "The **AspNetUserRoles** table stores the association between users and their respective roles in the system, including the mapping of unique user identifiers to specific role identifiers. Key fields include:  \n- **UserId** (a unique identifier representing a user, used as a foreign key to link users to roles),  \n- **RoleId** (a unique identifier representing a role, used as a foreign key to link roles to users).",
    "Schedules": "The **Schedules** table stores information about various schedules, including their types, associated projects, and operational time ranges. It is used to manage and track schedules, ensuring they are linked to specific projects and have clear descriptions and timeframes. Key fields include:  \n- **Id** (a unique identifier for each schedule entry, stored as a UUID),  \n- **Name** (a descriptive label or title for the schedule, such as 'Hour'),  \n- **ProjectId** (a GUID linking the schedule to a specific project),  \n- **Description** (additional context or details about the schedule),  \n- **ScheduleType** (the frequency or type of the schedule, such as hourly),  \n- **ScheduleInfo** (JSON-formatted data defining the start and end times of the schedule),  \n- **CreatedDate** (the timestamp when the schedule was created), and  \n- **LastModifiedDate** (the timestamp of the most recent modification to the schedule).",
    "AspNetUsers": "The **AspNetUsers** table stores user account information, including authentication, personal details, and security-related data. Key fields include:  \n- **Id** (a unique identifier for each user, stored as a GUID),  \n- **UserName** (a unique identifier or username for authentication purposes),  \n- **Email** (the user's email address, used for communication and account management),  \n- **PasswordHash** (the hashed representation of the user's password for secure authentication),  \n- **SecurityStamp** (a unique string used to track changes in user credentials),  \n- **LockoutEnabled** (a boolean indicating whether the account can be locked after failed login attempts),  \n- **FirstName** and **LastName** (the user's first and last names for identification),  \n- **DateCreated** (the timestamp of when the user account was created), and  \n- **IsDeleted** (a boolean flag indicating whether the account has been marked as deleted).  \n\nThis table is central to user management, authentication, and security within the application.",
    "OperationStore": "The **OperationStore** table stores detailed information about operations, including their unique identifiers, metadata, timestamps, and expiration details. This table is used to track and manage the state, progress, and lifespan of operations within the system. Key fields include:  \n- **OperationId** (a unique identifier for each operation, stored as a GUID),  \n- **Value** (a JSON object containing metadata about the operation, such as its type, status, and configuration),  \n- **TimeStamp** (the exact date and time when an operation or event occurred),  \n- **ExpiresAt** (the date and time when an operation or record is set to expire),  \n- **SlidingExpiryMinutes** (the duration in minutes after which an operation expires if no activity occurs), and  \n- **LastActionTimeStamp** (the timestamp of the most recent action or operation performed).",
    "WorkflowDroppedSteps": "The **WorkflowDroppedSteps** table stores information about steps or nodes that have been dropped or removed from workflows, including details about the specific workflows and the unique combinations of steps involved. Key fields include: **WorkflowId** (a unique identifier for the workflow associated with the dropped steps), and **UniqueHashCode** (a unique identifier or hash code representing the specific combination of workflow steps or nodes).",
    "AspNetUserTokens": "The **AspNetUserTokens** table stores authentication and authorization token data for users, including details about external login providers and token types. It plays a critical role in managing user authentication processes and linking users to their associated tokens. Key fields include:  \n- **UserId** (a unique identifier linking a user to their tokens),  \n- **LoginProvider** (the name or identifier of the external authentication provider used for login),  \n- **Name** (the type or category of the token, such as its purpose or context),  \n- **Value** (the actual token data or related information associated with the user).",
    "OperationResultStore": "The **OperationResultStore** table stores information related to the results and metadata of operations, including details about their execution, expiration, and associated data. Key fields include:  \n- **OperationId** (a unique identifier for individual operations, linking them to their results),  \n- **TimeStamp** (the date and time when an operation was logged or completed),  \n- **ExpiresAt** (a timestamp indicating when an operation result expires),  \n- **SlidingExpiryMinutes** (the duration in minutes for which an operation result remains valid under a sliding expiration policy),  \n- **Data** (the output or result data generated by an operation, such as logs or serialized objects),  \n- **LastActionTimeStamp** (the timestamp of the most recent action or update performed on the operation).",
    "CaptureAgentEventLogs": "The **CaptureAgentEventLogs** table stores detailed records of events logged by capture agents, including information about the type, timing, and source of these events. Key fields include:  \n- **EventId** (a unique identifier for each event, stored as a UUID),  \n- **AgentId** (a unique identifier for the agent associated with the event, stored as a UUID),  \n- **EventName** (the type of event, such as 'start' or 'stop'),  \n- **EventTime** (the precise timestamp of the event in ISO 8601 format), and  \n- **EventSource** (the origin or trigger of the event, such as 'Schedule').  \n\nThis table is used to track and monitor the activities and operational status of capture agents, enabling chronological analysis and system monitoring.",
    "CaptureAgents": "The **CaptureAgents** table stores information about capture agents, including their unique identifiers, operational status, and activity details. Key fields include:  \n- **AgentId** (a unique identifier for each capture agent),  \n- **Name** (a unique identifier combining user/system names and specific identifiers),  \n- **Health** (the operational status of the agent, such as connected or disconnected),  \n- **LastHeartBeat** (the timestamp of the most recent communication from the agent),  \n- **CaptureState** (the current operational mode of the agent, such as active or stopped), and  \n- **AgentVersion** (the software or firmware version of the agent).  \n\nThis table is essential for managing and monitoring the activity, connectivity, and configuration of capture agents within the system.",
    "CaptureAgentStatusEvent": "The **CaptureAgentStatusEvent** table stores information about the status events of capture agents, including details about their operational state, updates, and activities. Key fields include:  \n- **CaptureAgentId** (a unique identifier for each capture agent, used to track and distinguish individual agents),  \n- **Module** (the type or category of the capture agent, such as a remote capture module),  \n- **StatusEventKey** (an identifier representing the type of status event, often related to media versions),  \n- **StatusEventValue** (the version or build number associated with the capture agent's status event),  \n- **UpdatedDateTime** (a timestamp indicating when the status was last updated), and  \n- **EventId** (a unique identifier for each recorded event, ensuring traceability).  \n\nThis table is essential for monitoring and auditing the status and activities of capture agents within the system.",
    "CaptureJobGroup": "The **CaptureJobGroup** table stores information about groups of capture jobs, including their unique identifiers and associations. Key fields include:  \n- **CaptureJobId** (a unique identifier for individual capture jobs within a group, likely populated dynamically during job execution),  \n- **GroupId** (a unique identifier for a group of capture jobs, used to associate or categorize related jobs, potentially representing a placeholder or default value when no specific group is assigned).",
    "CaptureJobPIGroup": "The **CaptureJobPIGroup** table stores information about the association between capture jobs and user groups, including details that link specific capture jobs to their respective user groups. Key fields include: **CaptureJobId** (a unique identifier for individual capture jobs), and **PIUserGroupId** (a unique identifier representing user groups associated with capture jobs). These fields help in organizing and referencing capture jobs based on their related user groups.",
    "CaptureJobs": "The **CaptureJobs** table stores information related to capture jobs, including details about job creation, modification, and configuration. Key fields include:  \n- **Name** (descriptive labels or identifiers for individual capture jobs),  \n- **ProjectId** (a unique identifier linking each job to a specific project),  \n- **CreatedDate** (the timestamp when each job was created),  \n- **CaptureJobId** (a unique identifier for each capture job),  \n- **JobType** (the type of job being performed, such as scheduled tasks), and  \n- **IsContinuous** (a boolean flag indicating whether the job is configured to run continuously).  \n\nThis table is essential for managing and tracking capture job instances, their associations with projects, and their operational configurations.",
    "CaptureJobSchedules": "The **CaptureJobSchedules** table stores information related to the scheduling of capture jobs, including details about the timing, frequency, and configuration of automated job executions. Key fields include:  \n- **ScheduleName** (the name or label assigned to a specific job schedule, often defaulting to 'None' if unnamed),  \n- **ScheduleType** (the type of schedule, such as 'basicschedule' or 'dailyschedule', defining the frequency or pattern of job execution),  \n- **ScheduleInfo** (JSON-formatted details specifying start/end dates, times, and intervals for job execution),  \n- **CaptureJobId** (a unique identifier linking the schedule to a specific capture job), and  \n- **CronExpression** (a cron expression defining the precise timing for automated job executions).",
    "CapturePreferenceGroup": "The **CapturePreferenceGroup** table stores configurations related to capture preferences, including unique identifiers for both individual preferences and the groups they belong to. Key fields include:  \n- **CapturePreferenceId** (a unique identifier for each capture preference configuration),  \n- **GroupId** (a unique identifier for a specific group within the system, likely auto-generated or populated during group creation).",
    "CapturePreferences": "The **CapturePreferences** table stores user or system-defined settings and configurations related to data capture processes, including preferences for specific projects or workflows. Key fields include:  \n- **CapturePreferenceId** (a unique identifier for each capture preference record),  \n- **Name** (the name or label associated with a specific preference or configuration),  \n- **Description** (optional textual details or notes about the preference),  \n- **Version** (the version number or identifier for a set of preferences),  \n- **FileName** (the name or path of a file associated with the preference),  \n- **Preference** (user-defined or system-defined settings for data capture),  \n- **ProjectId** (a unique identifier linking preferences to specific projects), and  \n- **IsDeleted** (a flag indicating whether the record has been marked as deleted).",
    "CaptureResourceGroupMap": "The **CaptureResourceGroupMap** table stores mappings between resources and their associated groups, including details about resource identifiers, group identifiers, and optional metadata or override conditions. Key fields include:  \n- **CaptureResourceId** (a unique identifier for a resource within a capture group, potentially optional or dynamically populated),  \n- **CaptureResourceGroupId** (a unique identifier for a resource group, likely linking resources to specific groups),  \n- **Data** (additional information or metadata related to the resource-group mapping, often optional),  \n- **Override** (a flag or indicator specifying whether a default resource group mapping should be overridden).",
    "CaptureResourceGroups": "The **CaptureResourceGroups** table stores information about resource groups, including their unique identifiers, names, associated projects, descriptions, and statuses. Key fields include:  \n- **Id** (a unique identifier for each resource group, stored as a GUID),  \n- **Name** (the name or label of the resource group, such as 'res1' or 'IT'),  \n- **ProjectId** (a unique identifier linking the resource group to a specific project),  \n- **Description** (optional textual details about the resource group),  \n- **IsDeleted** (a boolean flag indicating whether the resource group is marked as deleted),  \n- **CreatedDate** (the timestamp of when the resource group was created),  \n- **LastModifiedDate** (the timestamp of the most recent modification to the resource group), and  \n- **IncludeAll** (a boolean flag indicating whether all resources in the group should be included in a specific operation).  \n\nThis table is essential for organizing, managing, and tracking resource groups within the system.",
    "CaptureResources": "The **CaptureResources** table stores metadata and configurations for resources used in data capture and processing, including tools, applications, and rules. Key fields include:  \n- **Id** (a unique identifier for each resource, stored as a GUID),  \n- **Name** (descriptive labels for resources, such as tools or rules),  \n- **FileName** (names of associated files, often XML documents),  \n- **Data** (XML-formatted configurations and rules for applications and web interactions),  \n- **Description** (additional context or purpose of the resource),  \n- **IsDeleted** (a boolean flag indicating whether the resource is marked as deleted),  \n- **CreatedDate** (timestamp of when the resource was created),  \n- **LastModifiedDate** (timestamp of the most recent modification),  \n- **Drive** (a status or category identifier for the resource), and  \n- **RelativePath** (relative file or directory paths for the resource's location).",
    "DomainTypes": "The **DomainTypes** table stores information about domains and their classifications, including unique domain names and their associated types or categories. Key fields include:  \n- **Domain** (stores unique domain names or identifiers, such as website domains or system-specific labels, used to categorize or identify different domains within the system),  \n- **Type** (represents a classification or category, such as \"Productive,\" indicating the nature or operational state of a domain).",
    "EpiAuditTrail": "The **EpiAuditTrail** table stores detailed records of system activities and user interactions, including authentication attempts, API access, and other critical events. It is primarily used for auditing and tracking changes or actions within the system to ensure accountability and traceability. Key fields include:  \n- **Id** (a unique identifier for each audit record, using UUIDs to ensure distinct entries),  \n- **TimeStamp** (the precise date and time when an event occurred, recorded down to the millisecond),  \n- **Action** (the type of action performed, such as login attempts or other user activities),  \n- **UserName** (the name of the user who performed the action, used for accountability),  \n- **BrowserInfo** (details about the browser and operating system used during the interaction),  \n- **ClientIpAddress** (the IP address of the client or system that interacted with the application),  \n- **HttpMethod** (the HTTP method used in the request, such as POST or GET),  \n- **UrlAccessed** (the URL or API endpoint accessed during the event), and  \n- **Data** (JSON-formatted information containing detailed event data, such as error messages or application-specific details).",
    "EpiBlockEventsConfiguration": "The **EpiBlockEventsConfiguration** table stores configuration details for events and actions within the system, including settings related to executable processes, user interface controls, and event triggers. It is used to manage and define how specific events are handled, blocked, or monitored. Key fields include:  \n- **Id** (a unique identifier for each record),  \n- **ExeName** (the executable file name associated with an event),  \n- **ControlName** (the name of the control or interface element linked to the event),  \n- **EventName** (the type or name of the event being configured),  \n- **BlockName** (the name of the event or action being blocked or monitored), and  \n- **BlockId** (a unique identifier for specific event blocks or actions).",
    "EpiEventRetentionConfiguration": "The **EpiEventRetentionConfiguration** table stores configurations for event retention policies, including details about how specific system or application events are managed and retained. Key fields include:  \n- **Id** (a unique identifier for each retention configuration),  \n- **ChannelId** (an identifier for the communication or distribution channel associated with the configuration, often optional),  \n- **ExeName** (the name of the executable or process tied to the configuration, if applicable),  \n- **ControlType** (the type of control or input mechanism used for the configuration, such as editable text or a list),  \n- **EventName** (the name or type of event being configured, such as 'windowactivate'),  \n- **ControlData** (placeholder or default values indicating the absence of specific control parameters),  \n- **EventRetentionType** (the retention policy for events, such as retaining none or all events), and  \n- **Description** (textual explanations or notes about the retention rules applied to specific events).",
    "EpiGPSFiles": "The **EpiGPSFiles** table stores GPS-related data, including file metadata, processing status, and user or machine associations. This table is used to manage and track GPS files, ensuring traceability and organization within the system. Key fields include:  \n- **FileID** (a unique identifier for each file, stored as a UUID),  \n- **FileName** (the name of the GPS file, often representing specific data logs or tracking activities),  \n- **DateTime** (the timestamp indicating when the GPS data was captured or logged),  \n- **UserId** (a unique identifier linking the file to a specific user),  \n- **MachineName** (the identifier of the machine or device associated with the GPS data),  \n- **IsProcessed** (a boolean flag indicating whether the file has been processed),  \n- **GPSHeader** (XML-formatted metadata containing workflow details for GPS captures), and  \n- **AuthorName** (the name of the author or contributor associated with the file).  \n\nThis table is essential for organizing, tracking, and analyzing GPS data, ensuring efficient management of files and their associated metadata.",
    "EpiGroupRole": "The **EpiGroupRole** table stores associations between groups and roles within the system, including the mapping of specific roles to designated groups. Key fields include:  \n- **GroupId** (a unique identifier for a group, used to link roles to specific groups),  \n- **EpiRoleId** (a unique identifier for roles, used to associate roles with groups or permissions).",
    "EpiGroups": "The **EpiGroups** table stores information about groups within the system, including their unique identifiers, names, descriptions, and timestamps for creation and modification. Key fields include:  \n- **GroupId** (a unique identifier for each group, stored as a GUID),  \n- **Name** (a human-readable label for the group, such as service or test groups),  \n- **Description** (additional context or notes about the group, though often left empty),  \n- **DateCreated** (the timestamp when the group record was created),  \n- **LastModified** (the timestamp when the group record was last updated),  \n- **IsDeleted** (a boolean flag indicating if the group is marked as deleted), and  \n- **CanModify** (a boolean flag indicating if the group's data can be modified).  \n\nThis table is essential for managing and tracking group-related data, ensuring traceability, and controlling access permissions.",
    "EpiGroupTask": "The **EpiGroupTask** table stores information about tasks associated with specific groups, including their unique identifiers and relationships. Key fields include: **ProcessTaskId** (a unique identifier or reference for a specific task or process within the system, potentially used when a task is assigned or linked to a process), and **GroupId** (a unique identifier for a specific group associated with a task, likely serving as a foreign key or placeholder for linking tasks to their respective groups).",
    "EpiNoiseEventConfiguration": "The **EpiNoiseEventConfiguration** table stores configurations for managing noise-related events, including details about associated channels, executables, control mechanisms, and event types. Key fields include:  \n- **Id** (a unique identifier for each configuration),  \n- **ChanelId** (an optional identifier for a specific channel or source),  \n- **ExeName** (the name of an executable file or process, if applicable),  \n- **ControlType** (the type of control mechanism applied to noise events),  \n- **EventName** (the name or category of the event, such as 'keyevent'),  \n- **ControlData** (a sequence of keyboard inputs or commands for configuring events), and  \n- **Description** (a textual description providing context or labels for the configuration).",
    "EpiProjectGroup": "The **EpiProjectGroup** table stores information about the association between projects and their respective groups, including unique identifiers for both projects and groups. This table is essential for organizing and linking projects to specific groups within the database. Key fields include:  \n- **ProjectId** (a unique identifier for individual projects, stored as GUIDs),  \n- **GroupId** (a unique identifier for project groups, stored as UUIDs).",
    "EpiProjects": "The **EpiProjects** table stores information about various projects, including their unique identifiers, names, creation and modification timestamps, descriptions, and deletion status. Key fields include:  \n- **ProjectId** (a unique identifier for each project, stored as a GUID),  \n- **Name** (the descriptive title or name of the project),  \n- **DateCreated** (the timestamp when the project was created),  \n- **LastModified** (the timestamp of the most recent modification to the project),  \n- **Description** (optional textual details or notes about the project), and  \n- **IsDeleted** (a boolean flag indicating whether the project is marked as deleted).  \n\nThis table is essential for tracking and managing project-related data, ensuring traceability, and maintaining a record of changes over time.",
    "EpiProjectUser": "The **EpiProjectUser** table stores information linking users to specific projects, including their unique identifiers and associations. Key fields include:  \n- **ProjectId** (a unique identifier (UUID) that links users to specific projects),  \n- **Id** (a globally unique identifier (GUID) for each user associated with an EpiProject),  \n- **EpiUserId** (a unique identifier (UUID) representing individual users linked to projects).",
    "EpiUserGroup": "The **EpiUserGroup** table stores information about user groups, including their unique identifiers and relationships. Key fields include: **Id** (a unique identifier for each user group, stored as a GUID), and **GroupId** (a unique identifier for user groups, stored as a UUID). These fields are used to uniquely reference and distinguish specific user groups within the system.",
    "EpiUserPIUserGroupMap": "The **EpiUserPIUserGroupMap** table stores mappings between users and their associated principal investigator (PI) user groups, including the relationships that link individual users to specific groups. Key fields include: **UserId** (a unique identifier representing individual users), and **PIUserGroupId** (a unique identifier representing the user groups associated with a principal investigator). These fields are used to establish and manage the connections between users and their respective groups within the system."
}